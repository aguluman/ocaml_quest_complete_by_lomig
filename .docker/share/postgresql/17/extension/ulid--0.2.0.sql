/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid
CREATE TYPE ulid;

-- src/lib.rs:22
-- pgx_ulid::ulid_in
CREATE  FUNCTION "ulid_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS ulid /* core::option::Option<pgx_ulid::ulid> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_in_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_out
CREATE  FUNCTION "ulid_out"(
	"input" ulid /* pgx_ulid::ulid */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_out_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid
CREATE TYPE ulid (
	INTERNALLENGTH = variable,
	INPUT = ulid_in, /* pgx_ulid::ulid_in */
	OUTPUT = ulid_out, /* pgx_ulid::ulid_out */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:96
-- pgx_ulid::gen_monotonic_ulid
CREATE  FUNCTION "gen_monotonic_ulid"() RETURNS ulid /* pgx_ulid::ulid */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'gen_monotonic_ulid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:115
-- pgx_ulid::gen_ulid
CREATE  FUNCTION "gen_ulid"() RETURNS ulid /* pgx_ulid::ulid */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'gen_ulid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:147
-- pgx_ulid::timestamp_to_ulid
CREATE  FUNCTION "timestamp_to_ulid"(
	"input" timestamp /* pgrx::datum::time_stamp::Timestamp */
) RETURNS ulid /* pgx_ulid::ulid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'timestamp_to_ulid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:162
-- pgx_ulid::timestamptz_to_ulid
CREATE  FUNCTION "timestamptz_to_ulid"(
	"input" timestamp with time zone /* pgrx::datum::time_stamp_with_timezone::TimestampWithTimeZone */
) RETURNS ulid /* pgx_ulid::ulid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'timestamptz_to_ulid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_cmp
CREATE  FUNCTION "ulid_cmp"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_cmp_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_eq
CREATE  FUNCTION "ulid_eq"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_eq_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_eq
CREATE OPERATOR = (
	PROCEDURE="ulid_eq",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:120
-- pgx_ulid::ulid_from_uuid
CREATE  FUNCTION "ulid_from_uuid"(
	"input" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS ulid /* pgx_ulid::ulid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_from_uuid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_ge
CREATE  FUNCTION "ulid_ge"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_ge_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_ge
CREATE OPERATOR >= (
	PROCEDURE="ulid_ge",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_gt
CREATE  FUNCTION "ulid_gt"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_gt_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_gt
CREATE OPERATOR > (
	PROCEDURE="ulid_gt",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_hash
CREATE  FUNCTION "ulid_hash"(
	"value" ulid /* pgx_ulid::ulid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_hash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_le
CREATE  FUNCTION "ulid_le"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_le_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_le
CREATE OPERATOR <= (
	PROCEDURE="ulid_le",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_lt
CREATE  FUNCTION "ulid_lt"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_lt_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_lt
CREATE OPERATOR < (
	PROCEDURE="ulid_lt",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid_ne
CREATE  FUNCTION "ulid_ne"(
	"left" ulid, /* pgx_ulid::ulid */
	"right" ulid /* pgx_ulid::ulid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_ne_wrapper';

-- src/lib.rs:22
-- pgx_ulid::ulid_ne
CREATE OPERATOR <> (
	PROCEDURE="ulid_ne",
	LEFTARG=ulid, /* pgx_ulid::ulid */
	RIGHTARG=ulid, /* pgx_ulid::ulid */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:134
-- pgx_ulid::ulid_to_bytea
CREATE  FUNCTION "ulid_to_bytea"(
	"input" ulid /* pgx_ulid::ulid */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_to_bytea_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:141
-- pgx_ulid::ulid_to_timestamp
CREATE  FUNCTION "ulid_to_timestamp"(
	"input" ulid /* pgx_ulid::ulid */
) RETURNS timestamp /* pgrx::datum::time_stamp::Timestamp */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_to_timestamp_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:127
-- pgx_ulid::ulid_to_uuid
CREATE  FUNCTION "ulid_to_uuid"(
	"input" ulid /* pgx_ulid::ulid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ulid_to_uuid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:177
-- requires:
--   ulid_from_uuid
--   ulid_to_uuid
--   ulid_to_bytea
--   ulid_to_timestamp
--   timestamp_to_ulid
--   timestamptz_to_ulid


CREATE CAST (uuid AS ulid) WITH FUNCTION ulid_from_uuid(uuid) AS IMPLICIT;
CREATE CAST (ulid AS uuid) WITH FUNCTION ulid_to_uuid(ulid) AS IMPLICIT;
CREATE CAST (ulid AS bytea) WITH FUNCTION ulid_to_bytea(ulid) AS IMPLICIT;
CREATE CAST (ulid AS timestamp) WITH FUNCTION ulid_to_timestamp(ulid) AS IMPLICIT;
CREATE CAST (timestamp AS ulid) WITH FUNCTION timestamp_to_ulid(timestamp) AS IMPLICIT;
CREATE CAST (timestamptz AS ulid) WITH FUNCTION timestamptz_to_ulid(timestamptz) AS IMPLICIT;
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid
CREATE OPERATOR FAMILY ulid_btree_ops USING btree;
CREATE OPERATOR CLASS ulid_btree_ops DEFAULT FOR TYPE ulid USING btree FAMILY ulid_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 ulid_cmp(ulid, ulid);
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:22
-- pgx_ulid::ulid
CREATE OPERATOR FAMILY ulid_hash_ops USING hash;
CREATE OPERATOR CLASS ulid_hash_ops DEFAULT FOR TYPE ulid USING hash FAMILY ulid_hash_ops AS
	OPERATOR    1   =  (ulid, ulid),
	FUNCTION    1   ulid_hash(ulid);
/* </end connected objects> */

